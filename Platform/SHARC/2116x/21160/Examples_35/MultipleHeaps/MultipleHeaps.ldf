/*
** Default LDF for a VDK project on the ADSP-21160
*/

// Setup the architecture
ARCHITECTURE(ADSP-21160)

// Setup the search directories
#ifdef __swfa
SEARCH_DIR( $ADI_DSP/211xx/lib/swfa; $ADI_DSP/211xx/lib  )
#else
SEARCH_DIR( $ADI_DSP/211xx/lib )
#endif

// Include the VDK preprocessor macros
#define VDK_LDF_
#include "VDK.h"

// Setup the VDK library preprocessor macros
#if VDK_INSTRUMENTATION_LEVEL_==2
#define VDK_IFLAG_ i
#elif VDK_INSTRUMENTATION_LEVEL_==1
#define VDK_IFLAG_ e
#else
#define VDK_IFLAG_ n
#endif

// The I/O library provides support for printing hexadecimal constants
// using the "%a" conversion specifier, and for registering alternatives to
// the default device driver that is supported by the VisualDSP++ simulator
// and EZ-KIT Lite systems. Those applications that do not require this
// functionality may define the macro __LIBIO_LITE which will select an
// alternative I/O library and lead to reduced code occupancy.

#if defined(__LIBIO_LITE)
# define LIBIO libio_lite.dlb
# define LIBIOMT libio_litemt.dlb
#elif defined(__LIBIO_FX)
# define LIBIO libio_fx.dlb   /* Fast IO and host IO with fixed-point support */
# define LIBIOMT libio_fxmt.dlb   /* Fast IO and host IO with fixed-point support              */
#else
# define LIBIO libio.dlb
# define LIBIOMT libiomt.dlb
#endif

#ifdef __ADI_LIBEH__
$LIBRARIES = libc160mt.dlb, LIBIOMT, libdsp160.dlb, libcppehmt.dlb;
#else
$LIBRARIES = libc160mt.dlb, LIBIOMT, libdsp160.dlb, libcppmt.dlb;
#endif

$BASE_LIBRARIES = $LIBRARIES;

#ifdef __swfa
#define VDK_LIB_NAME_MACRO_(x) vdk- ## x ## -2116X_SWF.dlb
#define VDK_LIB_NAME_(x) VDK_LIB_NAME_MACRO_(x)
$LIBS = TMK-211XX_SWF.dlb, VDK-CORE-21160_SWF.dlb, VDK_LIB_NAME_(VDK_IFLAG_),  $BASE_LIBRARIES;
#else
#define VDK_LIB_NAME_MACRO_(x) vdk- ## x ## -2116X.dlb
#define VDK_LIB_NAME_(x) VDK_LIB_NAME_MACRO_(x)
$LIBS = TMK-211XX.dlb, VDK-CORE-21160.dlb, VDK_LIB_NAME_(VDK_IFLAG_),  $BASE_LIBRARIES;
#endif
$OBJS = 160_cpp_hdr_mt.doj, $COMMAND_LINE_OBJECTS;

//
// ADSP-21160 Memory Map:
//   ------------------------------------------------
//   Internal memory  0x0000 0000 to 0x000f ffff
//   ------------------------------------------------
//                    0x0000 0000 to 0x0000 0?ff  IOP Regs
//                    0x0000 0?00 to 0x0001 ffff  (reserved)
//           Block 0  0x0002 0000 to 0x0002 7fff  Long Word (64) Addresses
//           Block 1  0x0002 8000 to 0x0002 ffff  Long Word (64) Addresses
//                    0x0003 0000 to 0x0003 ffff  (reserved)
//           Block 0  0x0004 0000 to 0x0004 ffff  Normal Word (32/48) Addresses
//           Block 1  0x0005 0000 to 0x0005 ffff  Normal Word (32/48) Addresses
//                    0x0006 0000 to 0x0007 ffff  (reserved)
//           Block 0  0x0008 0000 to 0x0009 ffff  Short Word (16) Addresses
//           Block 1  0x000a 0000 to 0x000b ffff  Short Word (16) Addresses
//                    0x000c 0000 to 0x000f ffff  (reserved)
//   ------------------------------------------------
//   Multiproc memory 0x0010 0000 to 0x007f ffff
//   ------------------------------------------------
//                    0x0010 0000 to 0x001f ffff  ADSP-21160 ID=001 Internal memory
//                    0x0020 0000 to 0x002f ffff  ADSP-21160 ID=010 Internal memory
//                    0x0030 0000 to 0x003f ffff  ADSP-21160 ID=011 Internal memory
//                    0x0040 0000 to 0x004f ffff  ADSP-21160 ID=100 Internal memory
//                    0x0050 0000 to 0x005f ffff  ADSP-21160 ID=101 Internal memory
//                    0x0060 0000 to 0x006f ffff  ADSP-21160 ID=110 Internal memory
//                    0x0070 0000 to 0x007f ffff  ADSP-21160 ID=all Internal memory
//   ------------------------------------------------
//   External memory  0x0080 0000 to 0xffff ffff
//   ------------------------------------------------
//

PROCESSOR p0
{

  KEEP( _main,___ctor_NULL_marker,___lib_end_of_heap_descriptions )
  KEEP(_kMaxNumThreads__3VDK,_kMaxNumActiveSemaphores__3VDK,
        _g_Sem_ThreadBaseOffset__3VDK ,_kMaxNumActiveDevFlags__3VDK ,
        _kMaxNumActiveMessages__3VDK,  _kMaxNumActiveMemoryPools__3VDK,
        _kNumEvents__3VDK, _kNumEventBits__3VDK, tmk_RescheduleISRVector)
  LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST)
  OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

  MEMORY
  {
    seg_EMUI     { TYPE(PM RAM) START(0x00040000) END(0x00040003) WIDTH(48) }
    seg_RSTI     { TYPE(PM RAM) START(0x00040004) END(0x00040007) WIDTH(48) }
    seg_IICDI    { TYPE(PM RAM) START(0x00040008) END(0x0004000b) WIDTH(48) }
    seg_SOVFI    { TYPE(PM RAM) START(0x0004000c) END(0x0004000f) WIDTH(48) }
    seg_TMZHI    { TYPE(PM RAM) START(0x00040010) END(0x00040013) WIDTH(48) }
    seg_VIRPTI   { TYPE(PM RAM) START(0x00040014) END(0x00040017) WIDTH(48) }
    seg_IRQ2I    { TYPE(PM RAM) START(0x00040018) END(0x0004001b) WIDTH(48) }
    seg_IRQ1I    { TYPE(PM RAM) START(0x0004001c) END(0x0004001f) WIDTH(48) }
    seg_IRQ0I    { TYPE(PM RAM) START(0x00040020) END(0x00040023) WIDTH(48) }
    seg_RESV1    { TYPE(PM RAM) START(0x00040024) END(0x00040027) WIDTH(48) }
    seg_SPR0I    { TYPE(PM RAM) START(0x00040028) END(0x0004002b) WIDTH(48) }
    seg_SPR1I    { TYPE(PM RAM) START(0x0004002c) END(0x0004002f) WIDTH(48) }
    seg_SPT0I    { TYPE(PM RAM) START(0x00040030) END(0x00040033) WIDTH(48) }
    seg_SPT1I    { TYPE(PM RAM) START(0x00040034) END(0x00040037) WIDTH(48) }
    seg_LP0I     { TYPE(PM RAM) START(0x00040038) END(0x0004003B) WIDTH(48) }
    seg_LP1I     { TYPE(PM RAM) START(0x0004003C) END(0x0004003F) WIDTH(48) }
    seg_LP2I     { TYPE(PM RAM) START(0x00040040) END(0x00040043) WIDTH(48) }
    seg_LP3I     { TYPE(PM RAM) START(0x00040044) END(0x00040047) WIDTH(48) }
    seg_LP4I     { TYPE(PM RAM) START(0x00040048) END(0x0004004B) WIDTH(48) }
    seg_LP5I     { TYPE(PM RAM) START(0x0004004C) END(0x0004004F) WIDTH(48) }
    seg_EP0I     { TYPE(PM RAM) START(0x00040050) END(0x00040053) WIDTH(48) }
    seg_EP1I     { TYPE(PM RAM) START(0x00040054) END(0x00040057) WIDTH(48) }
    seg_EP2I     { TYPE(PM RAM) START(0x00040058) END(0x0004005b) WIDTH(48) }
    seg_EP3I     { TYPE(PM RAM) START(0x0004005c) END(0x0004005f) WIDTH(48) }
    seg_LSRQI    { TYPE(PM RAM) START(0x00040060) END(0x00040063) WIDTH(48) }
    seg_CB7I     { TYPE(PM RAM) START(0x00040064) END(0x00040067) WIDTH(48) }
    seg_CB15I    { TYPE(PM RAM) START(0x00040068) END(0x0004006b) WIDTH(48) }
    seg_TMZLI    { TYPE(PM RAM) START(0x0004006c) END(0x0004006f) WIDTH(48) }
    seg_FIXI     { TYPE(PM RAM) START(0x00040070) END(0x00040073) WIDTH(48) }
    seg_FLTOI    { TYPE(PM RAM) START(0x00040074) END(0x00040077) WIDTH(48) }
    seg_FLTUI    { TYPE(PM RAM) START(0x00040078) END(0x0004007b) WIDTH(48) }
    seg_FLTII    { TYPE(PM RAM) START(0x0004007c) END(0x0004007f) WIDTH(48) }
    seg_SFT0I    { TYPE(PM RAM) START(0x00040080) END(0x00040083) WIDTH(48) }
    seg_SFT1I    { TYPE(PM RAM) START(0x00040084) END(0x00040087) WIDTH(48) }
    seg_SFT2I    { TYPE(PM RAM) START(0x00040088) END(0x0004008b) WIDTH(48) }
    seg_SFT3I    { TYPE(PM RAM) START(0x0004008c) END(0x0004008f) WIDTH(48) }
    seg_RESV2    { TYPE(PM RAM) START(0x00040090) END(0x00040093) WIDTH(48) }

#ifdef __MEMINIT__
    seg_init     { TYPE(PM RAM) START(0x00040094) END(0x00040193) WIDTH(48) }
    seg_pmco     { TYPE(PM RAM) START(0x00040194) END(0x00049aa9) WIDTH(48) }
#else
    seg_pmco     { TYPE(PM RAM) START(0x00040094) END(0x00049aa9) WIDTH(48) }
#endif
    seg_pmda     { TYPE(PM RAM) START(0x0004e800) END(0x0004ffff) WIDTH(32) }

    seg_dmda     { TYPE(DM RAM) START(0x00050000) END(0x00057fff) WIDTH(32) }
    seg_heap     { TYPE(DM RAM) START(0x00058000) END(0x0005afff) WIDTH(32) }
    seg_userheap { TYPE(DM RAM) START(0x0005b000) END(0x0005dfff) WIDTH(32) }
    seg_stack    { TYPE(DM RAM) START(0x0005e000) END(0x0005ffff) WIDTH(32) }
  }

  SECTIONS
  {		
    seg_RSTI   { INPUT_SECTIONS( $OBJS(seg_RSTI   ) $LIBS(seg_RSTI  )) } > seg_RSTI
    seg_EMUI   { INPUT_SECTIONS( $OBJS(seg_EMUI   ) $LIBS(seg_EMUI  )) } > seg_EMUI
    seg_IICDI   { INPUT_SECTIONS( $OBJS(seg_IICDI   ) $LIBS(seg_IICDI  )) } > seg_IICDI
    seg_SOVFI    { INPUT_SECTIONS( $OBJS(seg_SOVFI   ) $LIBS(seg_SOVFI  )) } > seg_SOVFI
    seg_TMZHI   { INPUT_SECTIONS( $OBJS(seg_TMZHI   ) $LIBS(seg_TMZHI  )) } > seg_TMZHI
    seg_VIRPTI   { INPUT_SECTIONS( $OBJS(seg_VIRPTI   ) $LIBS(seg_VIRPTI  )) } > seg_VIRPTI
    seg_IRQ2I   { INPUT_SECTIONS( $OBJS(seg_IRQ2I   ) $LIBS(seg_IRQ2I  )) } > seg_IRQ2I
    seg_IRQ1I   { INPUT_SECTIONS( $OBJS(seg_IRQ1I   ) $LIBS(seg_IRQ1I  )) } > seg_IRQ1I
    seg_IRQ0I   { INPUT_SECTIONS( $OBJS(seg_IRQ0I   ) $LIBS(seg_IRQ0I  )) } > seg_IRQ0I
    seg_RESV1   { INPUT_SECTIONS( $OBJS(seg_RESV1   ) $LIBS(seg_RESV1  )) } > seg_RESV1
    seg_SPR0I   { INPUT_SECTIONS( $OBJS(seg_SPR0I   ) $LIBS(seg_SPR0I  )) } > seg_SPR0I
    seg_SPR1I   { INPUT_SECTIONS( $OBJS(seg_SPR1I   ) $LIBS(seg_SPR1I  )) } > seg_SPR1I
    seg_SPT0I   { INPUT_SECTIONS( $OBJS(seg_SPT0I   ) $LIBS(seg_SPT0I  )) } > seg_SPT0I
    seg_SPT1I   { INPUT_SECTIONS( $OBJS(seg_SPT1I   ) $LIBS(seg_SPT1I  )) } > seg_SPT1I
    seg_LP0I   { INPUT_SECTIONS( $OBJS(seg_LP0I   ) $LIBS(seg_LP0I  )) } > seg_LP0I
    seg_LP1I   { INPUT_SECTIONS( $OBJS(seg_LP1I   ) $LIBS(seg_LP1I  )) } > seg_LP1I
    seg_LP2I   { INPUT_SECTIONS( $OBJS(seg_LP2I   ) $LIBS(seg_LP2I  )) } > seg_LP2I
    seg_LP3I   { INPUT_SECTIONS( $OBJS(seg_LP3I   ) $LIBS(seg_LP3I  )) } > seg_LP3I
    seg_LP4I   { INPUT_SECTIONS( $OBJS(seg_LP4I   ) $LIBS(seg_LP4I  )) } > seg_LP4I
    seg_LP5I   { INPUT_SECTIONS( $OBJS(seg_LP5I   ) $LIBS(seg_LP5I  )) } > seg_LP5I
    seg_EP0I   { INPUT_SECTIONS( $OBJS(seg_EP0I   ) $LIBS(seg_EP0I  )) } > seg_EP0I
    seg_EP1I   { INPUT_SECTIONS( $OBJS(seg_EP1I   ) $LIBS(seg_EP1I  )) } > seg_EP1I
    seg_EP2I   { INPUT_SECTIONS( $OBJS(seg_EP2I   ) $LIBS(seg_EP2I  )) } > seg_EP2I
    seg_EP3I   { INPUT_SECTIONS( $OBJS(seg_EP3I   ) $LIBS(seg_EP3I  )) } > seg_EP3I
    seg_LSRQI   { INPUT_SECTIONS( $OBJS(seg_LSRQI   ) $LIBS(seg_LSRQI  )) } > seg_LSRQI
    seg_CB7I   { INPUT_SECTIONS( $OBJS(seg_CB7I   ) $LIBS(seg_CB7I  )) } > seg_CB7I
    seg_CB15I   { INPUT_SECTIONS( $OBJS(seg_CB15I   ) $LIBS(seg_CB15I  )) } > seg_CB15I
    seg_TMZLI   { INPUT_SECTIONS( $OBJS(seg_TMZLI   ) $LIBS(seg_TMZLI  )) } > seg_TMZLI
    seg_FIXI   { INPUT_SECTIONS( $OBJS(seg_FIXI   ) $LIBS(seg_FIXI  )) } > seg_FIXI
    seg_FLTOI   { INPUT_SECTIONS( $OBJS(seg_FLTOI   ) $LIBS(seg_FLTOI  )) } > seg_FLTOI
    seg_FLTUI   { INPUT_SECTIONS( $OBJS(seg_FLTUI   ) $LIBS(seg_FLTUI  )) } > seg_FLTUI
    seg_FLTII   { INPUT_SECTIONS( $OBJS(seg_FLTII   ) $LIBS(seg_FLTII  )) } > seg_FLTII
    seg_SFT0I   { INPUT_SECTIONS( $OBJS(seg_SFT0I   ) $LIBS(seg_SFT0I  )) } > seg_SFT0I
    seg_SFT1I   { INPUT_SECTIONS( $OBJS(seg_SFT1I   ) $LIBS(seg_SFT1I  )) } > seg_SFT1I
    seg_SFT2I   { INPUT_SECTIONS( $OBJS(seg_SFT2I   ) $LIBS(seg_SFT2I  )) } > seg_SFT2I
    seg_SFT3I   { INPUT_SECTIONS( $OBJS(seg_SFT3I   ) $LIBS(seg_SFT3I  )) } > seg_SFT3I
    seg_RESV2   { INPUT_SECTIONS( $OBJS(seg_RESV2   ) $LIBS(seg_RESV2  )) } > seg_RESV2


#ifdef __MEMINIT__
    seg_init
    {
        ldf_seginit_space = . ;
        INPUT_SECTIONS( $OBJS(seg_init) $LIBS(seg_init))
    } >seg_init
#endif

    seg_pmco
    {
        INPUT_SECTIONS( $OBJS(seg_int_code) $LIBS(seg_int_code))
#ifndef __MEMINIT__
        INPUT_SECTIONS( $OBJS(seg_init) $LIBS(seg_init))
#endif
        INPUT_SECTIONS( $OBJS(seg_pmco) $LIBS(seg_pmco))
        INPUT_SECTIONS( $OBJS(program) $LIBS(program))
    } >seg_pmco

    seg_pmda
    {
        INPUT_SECTIONS( $OBJS(seg_pmda) $LIBS(seg_pmda))
    } >seg_pmda

    seg_ctdm
    {
        FORCE_CONTIGUITY
        __ctors = .;    /* points to the start of the section */
        INPUT_SECTIONS( $OBJS(seg_ctdm) $LIBS(seg_ctdm))
        INPUT_SECTIONS( $OBJS(seg_ctdml) $LIBS(seg_ctdml))
    } > seg_dmda

    seg_dmda_internal
    {
        INPUT_SECTIONS( $LIBS(seg_int_hooks))
	// internal_memory_data input section must be in internal memory
        INPUT_SECTIONS( $OBJS(internal_memory_data) $LIBS(internal_memory_data))
    } > seg_dmda

    .bss ZERO_INIT
    {
        INPUT_SECTIONS( $OBJS(.bss) $LIBS(.bss))
    } > seg_dmda

    .gdt
    {
        FORCE_CONTIGUITY
        INPUT_SECTIONS( $OBJS(.gdt) $LIBS(.gdt))
        INPUT_SECTIONS( $OBJS(.gdtl) $LIBS(.gdtl))
    } > seg_dmda

    .frt
    {
        INPUT_SECTIONS( $OBJS(.frt) $LIBS(.frt))
        INPUT_SECTIONS( $OBJS(.frtl) $LIBS(.frtl))
    } > seg_dmda

    .cht
    {
        INPUT_SECTIONS( $OBJS(.cht) $LIBS(.cht))
        INPUT_SECTIONS( $OBJS(.chtl) $LIBS(.chtl))
    } > seg_dmda

    .rtti
    {
        INPUT_SECTIONS( $OBJS(.rtti) $LIBS(.rtti))
    } > seg_dmda

    .edt
    {
        INPUT_SECTIONS( $OBJS(.edt) $LIBS(.edt))
        INPUT_SECTIONS( $OBJS(.edtl) $LIBS(.edtl))
    } > seg_dmda

    seg_vtbl
    {
        INPUT_SECTIONS( $OBJS(seg_vtbl) $LIBS(seg_vtbl))
    } > seg_dmda

    seg_dmda
    {
        INPUT_SECTIONS( $OBJS(data1) $LIBS(data1))
        INPUT_SECTIONS( $OBJS(seg_dmda) $LIBS(seg_dmda))
    } > seg_dmda

    heap
    {
        // allocate a heap for the application
        ldf_heap_space = .;
        ldf_heap_length = MEMORY_SIZEOF(seg_heap);
        ldf_heap_end = ldf_heap_space + ldf_heap_length - 1;
    } > seg_heap

    seg_userheap
    {
        // allocate a userheap for the application
        ldf_userheap_space = .;
        ldf_userheap_length = MEMORY_SIZEOF(seg_userheap);
        ldf_userheap_end = ldf_userheap_space + ldf_userheap_length - 1;
    } > seg_userheap

    stackseg
    {
        ldf_stack_space = . ;
        ldf_stack_length =MEMORY_SIZEOF(seg_stack);
    } > seg_stack

  }

}

