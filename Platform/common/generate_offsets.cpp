/*******************************************************************
  Copyright (C) 2001-2018 Analog Devices, Inc. All Rights Reserved
*******************************************************************/

/* =============================================================================
 *
 *   $RCSfile$
 *
 *   Description: This file generates offset information for the assembly
 * interface.
 *
 *   Last modified $Date$
 *	 Last modified by $Author$
 *   $Revision$
 *   $Source$ 
 *
 * -----------------------------------------------------------------------------
 * This defines a class that handles output to a buffer
 *
 * The output is ENTIRELY in ASCII.  Numbers are output as hex (128 = 0000 0080)
 * -----------------------------------------------------------------------------
 * ===========================================================================*/
#undef VDK_INSTRUMENTATION_LEVEL_
#define VDK_INSTRUMENTATION_LEVEL_ 2

#include <stdio.h>
#include <string.h>
#include <Semaphore.h>
#include <Semaphore.h>
#include <EventBit.h>
#include <TMK.h>
#include <VDK_Thread.h>
#include <VDK_History.h>
#include <DebugInfo.h>
#include <IDTable.h>
#include <vdk_driver.h>
#include <VDK_RMutex.h>

using namespace VDK;

#define QUOTE_ME_CORE_(x) #x
#define QUOTE_ME_(x) QUOTE_ME_CORE_(x)

#define generate_offset_(type_, member_)																	\
do {																										\
	type_	*ptr = 0;																						\
	sprintf(t, "#define OFFSET_%s_%s_ (%d)\n", QUOTE_ME_(type_), QUOTE_ME_(member_), (int)(&ptr->member_));	\
	remove_extras(t, '.', '_');																				\
	printf(t);																								\
    fflush(stdout);                                                                                         \
} while (0)

#define generate_enum_(enum_)										\
do {																\
	sprintf(t, "#define ENUM_%s_ (%d)\n", QUOTE_ME_(enum_), enum_);	\
	remove_extras(t, '.', '_');										\
	printf(t);														\
    fflush(stdout);                                                 \
} while(0)

#define generate_sizeof_(type_)													\
do {																			\
	sprintf(t, "#define __VDK_SIZEOF_%s_ (%d)\n", QUOTE_ME_(type_), sizeof(type_));	\
	remove_extras(t, '.', '_');						        					\
	printf(t);																	\
    fflush(stdout);                                                             \
} while(0)

#define generate_sizeof_label_(type_, name_)                                                    \
do {                                                                            \
    sprintf(t, "#define %s (%dU)\n", name_, sizeof(type_)); \
    remove_extras(t, '.', '_');                                                 \
    printf(t);                                                                  \
    fflush(stdout);                                                             \
} while(0)

#define generate_sizeof_words_label_(type_, name_)                                                  \
do {                                                                            \
    sprintf(t, "#define %s (%dU)\n", name_, sizeof(type_)/sizeof(int)); \
    remove_extras(t, '.', '_');                                                 \
    printf(t);                                                                  \
    fflush(stdout);                                                             \
} while(0)

#define generate_pointer_conversion_(from_, to_)                            							\
do {                                                                        							\
    int     val = ((int)((to_*)((from_*) 4))) - 4;                          							\
    sprintf(t, "#define POINTER_CONVERSION_%s_TO_%s_ (%d)\n", QUOTE_ME_(from_), QUOTE_ME_(to_), val);   \
	remove_extras(to, '.', '_');                                            							\
	remove_extras(from, '.', '_');                                          							\
	printf(t);																							\
    fflush(stdout);                                                                                     \
} while(0)

void remove_extras(char *inStr, char inLook, char inReplace)
{
	char	*out_str = inStr;
	int		brace_count = 0;
	int		colon_count = 0;

	do
	{
		if (*inStr == '<')
			++brace_count;
		if (*inStr == '>')
		{
			--brace_count;
			if (brace_count == 0)
				continue;
		}
		if (brace_count == 0)
		{
			if (*inStr == ':')
			{
				if (colon_count == 0)
				{
					*out_str++ = '_';
					++colon_count;
				}
			}
			else
			{
				colon_count = 0;
				if (*inStr != inLook)
					*out_str++ = *inStr;
				else
					*out_str++ = inReplace;
			}
		}
	} while (*inStr++);
}

namespace VDK { volatile unsigned int g_EventBitState; };

int main()
{
	char	t[256];
	char	to[256];
	char	from[256];

	// Print some header information
	printf("/* Generated by tcl */\n\n");
	printf("#ifndef __VDK_ASM_OFFSETS_H_\n");
	printf("#define __VDK_ASM_OFFSETS_H_\n");
	printf("\n");
	printf("\n");

    // Sizes required externally
    generate_sizeof_label_(Mutex,"VDK_MUTEX_SIZE");
    generate_sizeof_words_label_(Mutex,"VDK_MUTEX_LEN");
	generate_sizeof_(IDElement);

    printf("// BEGIN_INTERNALS_STRIP\n");
	// Generate IDTable offsets
	typedef VDK::IDTable<int,int> IDTable;
    generate_offset_(IDTable, m_TableSize);
    generate_offset_(IDTable, m_IDTable);
    generate_offset_(IDTableElement, m_ObjectPtr);
    generate_offset_(IDTableElement, m_IndexCount);

	// Generate Semaphore offsets
    generate_offset_(Semaphore, m_Value);
    generate_offset_(Semaphore, m_ID);
    generate_offset_(Semaphore, m_PendingThreads);
	generate_offset_(Semaphore, m_PendingThreads.pHead);
	generate_offset_(Semaphore, m_MaxCount);
	generate_offset_(Semaphore, m_Period);
	generate_sizeof_(Semaphore);

    generate_enum_(kThreadError);
    generate_enum_(kISRError);
    generate_enum_(kUnknownSemaphore);
    generate_enum_(kUnknownEventBit);
    generate_enum_(kBadIOID);
    generate_enum_(kAbort);
    generate_enum_(kThreadStackOverflow);
    generate_enum_(kStackCheckFailure);
	printf("\n");
    
	// Generate Thread offsets
    generate_offset_(Thread, m_DebugInfoP);
	printf("\n");

	// Generate DebugInfo offsets
    generate_offset_(DebugInfo, m_nNumTimesRun);
    generate_offset_(DebugInfo, m_llRunStartCycles);
    generate_offset_(DebugInfo, m_llRunLastCycles);
    generate_offset_(DebugInfo, m_llRunTotalCycles);
    generate_offset_(DebugInfo, m_tRunStartTime);
    generate_offset_(DebugInfo, m_tRunLastTime); 
    generate_offset_(DebugInfo, m_tRunTotalTime);
	printf("\n");

    // Generate some HistoryBuffer constants
    generate_sizeof_(HistoryEvent);
    generate_sizeof_(HistoryStruct);
    generate_enum_(VDK::kSemaphorePosted);
    generate_enum_(VDK::kEventBitSet);
    generate_enum_(VDK::kEventBitCleared);
    generate_enum_(VDK::kDeviceActivated);
    generate_enum_(VDK::kThreadStatusChange);
    generate_enum_(VDK::kThreadSwitched );
    printf("\n");

	// generate some sizeofs
	generate_sizeof_(EventBit);
	printf("\n");

    // generate some pointer conversions
    generate_pointer_conversion_(Semaphore, TMK_DpcElement);
    generate_pointer_conversion_(DeviceDriver, TMK_DpcElement);
    generate_pointer_conversion_(Thread, TMK_Thread);
	printf("\n");
    printf("// END_INTERNALS_STRIP\n");

	// Print the footer
	printf("\n");
	printf("#endif /* __VDK_ASM_OFFSETS_H_*/\n");
	printf("\n");
	return 0;
}



